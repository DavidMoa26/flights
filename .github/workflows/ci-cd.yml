name: CI/CD Pipeline

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]

env:
  NODE_VERSION: '18'

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest

    # Set up PostgreSQL service for testing
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: flights_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint
      continue-on-error: true

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Setup test environment
      working-directory: ./backend
      run: |
        # Create test environment file
        cat > .env.test << EOF
        NODE_ENV=test
        POSTGRES_URI=postgresql://test_user:test_password@localhost:5432/flights_test_db?sslmode=disable
        DB_HOST=localhost
        DB_PORT=5432
        DB_NAME=flights_test_db
        DB_USER=test_user
        DB_PASSWORD=test_password
        EOF
        
        echo "‚úÖ Test environment configured"

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      continue-on-error: true

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_SERVICE_URL: http://localhost:4000

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: flights_integration_db
          POSTGRES_USER: integration_user
          POSTGRES_PASSWORD: integration_password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U integration_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Start backend
      working-directory: ./backend
      run: |
        npm start &
        echo $! > backend.pid
        sleep 20
        echo "Backend started, checking if it's responding..."
        curl http://localhost:4000/health || {
          echo "Backend not responding, checking if it's still running..."
          ps aux | grep node
          exit 1
        }
      env:
        NODE_ENV: development
        PORT: 4000
        POSTGRES_URI: postgresql://integration_user:integration_password@localhost:5432/flights_integration_db?sslmode=disable
        RUN_SEED: true

    - name: Run integration tests
      run: |
        echo "Testing backend health..."
        curl -f http://localhost:4000/health || exit 1
        echo "‚úÖ Backend health check passed"
        
        echo "‚úÖ Integration tests completed"

    - name: Stop backend
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run security audit for backend
      working-directory: ./backend
      run: npm audit --audit-level moderate
      continue-on-error: true

    - name: Run security audit for frontend
      working-directory: ./frontend
      run: npm audit --audit-level moderate
      continue-on-error: true
  
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: devops-project-463018

      - name: Enable Cloud Run API
        run: gcloud services enable run.googleapis.com

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      # üê≥ Build & Push Backend Image
      - name: Build and Push Backend Image
        run: |
          docker build -t europe-west1-docker.pkg.dev/devops-project-463018/flight-app-repo/backend ./backend
          docker push europe-west1-docker.pkg.dev/devops-project-463018/flight-app-repo/backend

      # üê≥ Build & Push Frontend Image
      - name: Build and Push Frontend Image
        run: |
          docker build -t europe-west1-docker.pkg.dev/devops-project-463018/flight-app-repo/frontend ./frontend
          docker push europe-west1-docker.pkg.dev/devops-project-463018/flight-app-repo/frontend

      # üöÄ Deploy Backend
      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy backend \
            --image=europe-west1-docker.pkg.dev/devops-project-463018/flight-app-repo/backend \
            --platform=managed \
            --region=europe-west1 \
            --allow-unauthenticated \
            --port=4000 \
            --set-env-vars=POSTGRES_URI=${{ secrets.POSTGRES_URI }}

      # üöÄ Deploy Frontend
      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy frontend \
            --image=europe-west1-docker.pkg.dev/devops-project-463018/flight-app-repo/frontend \
            --platform=managed \
            --region=europe-west1 \
            --allow-unauthenticated \
            --port=3000 \
            --set-env-vars=VITE_SERVICE_URL=${{ secrets.VITE_SERVICE_URL }}

  # Pipeline Summary
  pipeline-summary:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-tests, security-scan]
    if: always()

    steps:
    - name: Pipeline summary
      run: |
        echo "üìä CI/CD Pipeline Summary"
        echo "========================="
        echo "Backend Tests: ${{ needs.test-backend.result }}"
        echo "Frontend Tests: ${{ needs.test-frontend.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Build & Deploy Images: ${{ needs.build-and-deploy.result }}"
        echo ""
        if [ "${{ needs.test-backend.result }}" == "success" ] && [ "${{ needs.test-frontend.result }}" == "success" ] && [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "‚úÖ All tests passed! Your code is ready to deploy."
        else
          echo "‚ùå Some tests failed. Please check the logs and fix issues."
          exit 1
        fi

