name: CI/CD Pipeline

on:
  push:
    branches: [development, main, production]
  pull_request:
    branches: [development, main]

env:
  NODE_VERSION: "18"

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: flights_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
        working-directory: ./backend
      - run: npm run lint
        working-directory: ./backend
        continue-on-error: true
      - run: |
          until pg_isready -h localhost -p 5432 -U test_user; do sleep 2; done
      - run: |
          cat > .env.test << EOF
          NODE_ENV=test
          POSTGRES_URI=postgresql://test_user:test_password@localhost:5432/flights_test_db?sslmode=disable
          DB_HOST=localhost
          DB_PORT=5432
          DB_NAME=flights_test_db
          DB_USER=test_user
          DB_PASSWORD=test_password
          EOF
        working-directory: ./backend
      - run: npm test
        working-directory: ./backend
        env:
          NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
        working-directory: ./frontend
      - run: npm run lint
        working-directory: ./frontend
        continue-on-error: true
      - run: npm test
        working-directory: ./frontend
      - run: npm run build
        working-directory: ./frontend
        env:
          VITE_SERVICE_URL: http://localhost:4000
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: flights_integration_db
          POSTGRES_USER: integration_user
          POSTGRES_PASSWORD: integration_password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: cd backend && npm ci
      - run: cd frontend && npm ci
      - run: |
          until pg_isready -h localhost -p 5432 -U integration_user; do sleep 2; done
      - run: |
          npm start &
          echo $! > backend.pid
          sleep 20
        working-directory: ./backend
        env:
          NODE_ENV: development
          PORT: 4000
          POSTGRES_URI: postgresql://integration_user:integration_password@localhost:5432/flights_integration_db?sslmode=disable
          RUN_SEED: true
      - run: curl -f http://localhost:4000/health
      - if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
          fi

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
        working-directory: ./backend
      - run: npm ci
        working-directory: ./frontend
      - run: npm audit --audit-level moderate
        working-directory: ./backend
        continue-on-error: true
      - run: npm audit --audit-level moderate
        working-directory: ./frontend
        continue-on-error: true

  pipeline-summary:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-tests, security-scan]
    if: always()
    steps:
      - run: |
          echo "üìä CI/CD Pipeline Summary"
          echo "========================="
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          if [ "${{ needs.test-backend.result }}" == "success" ] && [ "${{ needs.test-frontend.result }}" == "success" ] && [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "‚úÖ All tests passed! Ready to deploy."
          else
            echo "‚ùå Some tests failed. Check logs."
            exit 1
          fi
